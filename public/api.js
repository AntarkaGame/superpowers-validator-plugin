(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){


SupAPI.registerPlugin('typescript', 'validator', {	
  code : "declare var validator;",
  defs: "// Type definitions for validator.js v3.22.1\r\n// Project: https://github.com/chriso/validator.js\r\n// Definitions by: tgfjt <https://github.com/tgfjt>\r\n// Definitions: https://github.com/borisyankov/DefinitelyTyped\r\n\r\n// options for #isURL\r\ninterface IURLoptions {\r\n  protocols?: string[]\r\n  require_tld?: boolean\r\n  require_protocol?: boolean\r\n  allow_underscores?: boolean\r\n}\r\n\r\n// options for isFQDN\r\ninterface IFQDNoptions {\r\n  require_tld?: boolean\r\n  allow_underscores?: boolean\r\n}\r\n\r\n// options for normalizeEmail\r\ninterface IEmailoptions {\r\n  lowercase?: boolean\r\n}\r\n\r\n// callback type for #extend \r\ninterface IExtendCallback {\r\n  (argv: string): any\r\n}\r\n\r\n// return function for #extend\r\ninterface IExtendFunc {\r\n  (argv: string): boolean\r\n}\r\n\r\ninterface IValidatorStatic {\r\n  // add your own validators\r\n  extend(name: string, fn: IExtendCallback): IExtendFunc;\r\n\r\n  // check if the string matches the comparison.\r\n  equals(str: string, comparison: any): boolean;\r\n\r\n  // check if the string contains the seed.\r\n  contains(str: string, elem: any): boolean;\r\n\r\n  // check if string matches the pattern.\r\n  matches(str: string, pattern: any, modifiers?: string): boolean;\r\n\r\n  // check if the string is an email.\r\n  isEmail(str: string): boolean;\r\n\r\n  // check if the string is an URL.\r\n  isURL(str: string, options?: IURLoptions): boolean;\r\n\r\n  // check if the string is a fully qualified domain name (e.g. domain.com).\r\n  isFQDN(str: string, options?: IFQDNoptions): boolean;\r\n\r\n  // check if the string is an IP (version 4 or 6).\r\n  isIP(str: string, version?: number): boolean;\r\n\r\n  // check if the string contains only letters (a-zA-Z).\r\n  isAlpha(str: string): boolean;\r\n\r\n  // check if the string contains only numbers.\r\n  isNumeric(str: string): boolean;\r\n\r\n  // check if the string contains only letters and numbers.\r\n  isAlphanumeric(str: string): boolean;\r\n\r\n  // check if a string is base64 encoded.\r\n  isBase64(str: string): boolean;\r\n\r\n  // check if the string is a hexadecimal number.\r\n  isHexadecimal(str: string): boolean;\r\n\r\n  // check if the string is a hexadecimal color.\r\n  isHexColor(str: string): boolean;\r\n\r\n  // check if the string is lowercase.\r\n  isLowercase(str: string): boolean;\r\n\r\n  // check if the string is uppercase.\r\n  isUppercase(str: string): boolean;\r\n\r\n  // check if the string is an integer.\r\n  isInt(str: string): boolean;\r\n\r\n  // check if the string is a float.\r\n  isFloat(str: string): boolean;\r\n\r\n  // check if the string is a number that's divisible by another.\r\n  isDivisibleBy(str: string, number: number): boolean;\r\n\r\n  // check if the string is null.\r\n  isNull(str: string): boolean;\r\n\r\n  // check if the string's length falls in a range. Note: this function takes into account surrogate pairs.\r\n  isLength(str: string, min: number, max?: number): boolean;\r\n\r\n  // check if the string's length (in bytes) falls in a range.\r\n  isByteLength(str: string, min: number, max?: number): boolean;\r\n\r\n  // check if the string is a UUID (version 3, 4 or 5).\r\n  isUUID(str: string, version?: number): boolean;\r\n\r\n  // check if the string is a date.\r\n  isDate(str: string): boolean;\r\n\r\n  // check if the string is a date that's after the specified date (defaults to now).\r\n  isAfter(str: string, date?: Date): boolean;\r\n\r\n  // check if the string is a date that's before the specified date.\r\n  isBefore(str: string, date?: Date): boolean;\r\n\r\n  // check if the string is in a array of allowed values.\r\n  isIn(str: string, values: any[]): boolean;\r\n\r\n  // check if the string is a credit card.\r\n  isCreditCard(str: string): boolean;\r\n\r\n  // check if the string is an ISBN (version 10 or 13).\r\n  isISBN(str: string, version?: number): boolean;\r\n\r\n  // check if the string is valid JSON (note: uses JSON.parse).\r\n  isJSON(str: string): boolean;\r\n\r\n  // check if the string contains one or more multibyte chars.\r\n  isMultibyte(str: string): boolean;\r\n\r\n  // check if the string contains ASCII chars only.\r\n  isAscii(str: string): boolean;\r\n\r\n  // check if the string contains any full-width chars.\r\n  isFullWidth(str: string): boolean;\r\n\r\n  // check if the string contains any half-width chars.\r\n  isHalfWidth(str: string): boolean;\r\n\r\n  // check if the string contains a mixture of full and half-width chars.\r\n  isVariableWidth(str: string): boolean;\r\n\r\n  // check if the string contains any surrogate pairs chars.\r\n  isSurrogatePair(str: string): boolean;\r\n\r\n  // check if the string is a valid hex-encoded representation of a MongoDB ObjectId.\r\n  isMongoId(str: string): boolean;\r\n\r\n  // convert the input to a string.\r\n  toString(input: any): string;\r\n\r\n  // convert the input to a date, or null if the input is not a date.\r\n  toDate(input: any): any; // Date or null\r\n\r\n  // convert the input to a float, or NaN if the input is not a float.\r\n  toFloat(input:any): number; // number or NaN\r\n\r\n  // convert the input to an integer, or NaN if the input is not an integer.\r\n  toInt(input:any, radix?: number): number; // number or NaN\r\n\r\n  // convert the input to a boolean.\r\n  toBoolean(input:any, strict?: boolean): boolean;\r\n\r\n  // trim characters (whitespace by default) from both sides of the input.\r\n  trim(input: any, chars?: string): string;\r\n\r\n  // trim characters from the left-side of the input.\r\n  ltrim(input: any, chars?: string): string;\r\n\r\n  // trim characters from the right-side of the input.\r\n  rtrim(input: any, chars?: string): string;\r\n\r\n  // replace <, >, &, ' and \" with HTML entities.\r\n  escape(input: string): string;\r\n\r\n  // remove characters with a numerical value < 32 and 127\r\n  stripLow(input: string, keep_new_lines?: boolean): string;\r\n\r\n  // remove characters that do not appear in the whitelist.\r\n  whitelist(input: string, chars: string): string;\r\n\r\n  // remove characters that appear in the blacklist. \r\n  blacklist(input: string, chars: string): string;\r\n\r\n  // canonicalize an email address.\r\n  normalizeEmail(email: string, options?: IEmailoptions): string;\r\n}\r\n\r\ndeclare module \"validator\" {\r\n  var validator: IValidatorStatic;\r\n  export = validator;\r\n}\r\n\r\ndeclare var validator;"
});
},{}]},{},[1]);
